import groovyx.net.http.HTTPBuilder
import org.apache.http.entity.mime.MultipartEntityBuilder
import groovy.io.FileType

import static groovyx.net.http.Method.POST

buildscript {
   repositories {
     mavenCentral()
   }
   dependencies {
      classpath 'org.apache.httpcomponents:httpmime:4.5.2'
      classpath 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'
   }
}

// set the properties accordingly
project.ext {
    baseDir = projectDir
    uiDir = "${baseDir}/ui"
    libDir = "${baseDir}/lib"
    configDir = "${baseDir}/metadata.xml"
    zipDir = "${baseDir}/zip"
    packageVendor = "ThingWorx Customer Service"
    thingworxServerRoot = "http://Administrator:admin@localhost:8001"
    thingworxUser = "Administrator"
    thingworxPass = "admin"
}

def increaseVersionNumber() {
      //getWidgetList()
    def file = "${baseDir}/metadata.xml"
    def parser = new groovy.util.XmlParser(false,true);
    def xml = parser.parse(file)

    def currentVersion = xml.ExtensionPackages.ExtensionPackage.@packageVersion[0];

    def versionComponents = currentVersion.split('\\.');

    def minorVersion = ++Integer.parseInt(versionComponents[versionComponents.length - 1]);

    versionComponents[versionComponents.length - 1] = String.valueOf(minorVersion);

    xml.ExtensionPackages.ExtensionPackage.@packageVersion = String.join('.', versionComponents);
  //  xml.ExtensionPackages.ExtensionPackage.get(0).attributes().put('packageVersion', String.join(',', versionComponents));

    println 'Updated to version ' + String.join('.', versionComponents)

    new XmlNodePrinter(new PrintWriter(new FileWriter(file))).print(xml)
}

def getWidgetList() {
    def file = "${baseDir}/metadata.xml"
    def parser = new groovy.util.XmlParser(false,true);
    def xml = parser.parse(file)

    xml.Widgets.Widget.each { widget ->
        println "Found widget: ${widget.@name}"
        def list = []

        def dir = new File("${project.ext.uiDir}/${widget.@name}")
        dir.eachFileRecurse (FileType.FILES) { file3 ->
             widget.UIResources[0]?.appendNode(
                "FileResource",
                [type: "JS", file: file3, description:"", isDevelopment:"false", isRuntime:"true"]
        )
        }

    }
     PrintWriter pw = new PrintWriter(new File(file))
    pw.write(groovy.xml.XmlUtil.serialize(xml))
    pw.close()
}

task generateUiMetadata() {
    def list = []

    def dir = new File("${project.ext.uiDir}")
    dir.eachFileRecurse (FileType.FILES) { file ->
        list << file
    }
    increaseVersionNumber()
    
}

task prepPackage(dependsOn: generateUiMetadata) {
    doLast {
        delete project.ext.zipDir
        // add the configuration
        copy {
            from "${project.ext.configDir}"
            into "${buildDir}/zip/"
        }
        // add the ui files
        copy {
            from uiDir
            into "${buildDir}/zip/ui/"
        }
    }
}

task packageExtension(type: Zip, dependsOn: prepPackage, overwrite: true) {
    archiveName = "${project.name}.zip"
    destinationDir = new File(project.ext.zipDir)
    from "${buildDir}/zip/"
}

task upload(dependsOn: packageExtension) {
  doLast{
    def http = new HTTPBuilder("${thingworxServerRoot}/Thingworx/")
    http.ignoreSSLIssues()

    http.request(POST) { req ->
        uri.path = 'ExtensionPackageUploader'
        uri.query = ['purpose': 'import']
        headers."X-XSRF-TOKEN" = "TWX-XSRF-TOKEN-VALUE"
        requestContentType = 'multipart/form-data'
        MultipartEntityBuilder entity = MultipartEntityBuilder.create().setLaxMode()
        entity.addBinaryBody('file', file("${baseDir}/zip/${project.name}.zip"))
        req.setEntity(entity.build())
        response.success = {resp ->
            println("Upload successful!")
        }

        response.failure = {resp ->
            println(resp.statusLine)
            throw new StopExecutionException("Thingworx upload failed! See server response above")
        }
    }
  }
}
